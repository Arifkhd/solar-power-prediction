# -*- coding: utf-8 -*-
"""
Created on Sun Sep  8 19:33:19 2024

@author: Dell
"""

import pickle
import streamlit as st
import joblib
from sklearn.ensemble import GradientBoostingClassifier

st.title('Power Generated Prediction :bar_chart:')

# Load the pre-trained model
model = joblib.load('solar (2).pkl')

# Prediction function
def predict(distance_to_solar_noon, temperature, wind_direction, wind_speed, sky_cover, visibility, humidity, average_wind_speed_period, average_pressure_period):
    prediction = model.predict([[distance_to_solar_noon, temperature, wind_direction, wind_speed, sky_cover, visibility, humidity, average_wind_speed_period, average_pressure_period]])
    return prediction[0]

# Main function for the Streamlit app
def main():
    st.markdown('This is a simple web app for predicting solar power in joules :chart:')
    
    # Input fields with validation
    distance_to_solar_noon = st.number_input('Enter Distance to Solar Noon', min_value=0.000000, value=0.000000, step=0.000001, format="%.6f")
    temperature = st.number_input('Enter Temperature (Â°C)', min_value=-50, max_value=100, value=0)
    wind_direction = st.number_input('Enter Wind Direction (degrees)', min_value=0, max_value=360, value=0)
    wind_speed = st.number_input('Enter Wind Speed (m/s)', min_value=0.0, value=0.0, step=0.1, format="%.1f")
    sky_cover = st.number_input('Enter Sky Cover (percentage)', min_value=0, max_value=100, value=0)
    visibility = st.number_input('Enter Visibility (km)', min_value=0.0, value=0.0, step=0.1, format="%.1f")
    humidity = st.number_input('Enter Humidity (percentage)', min_value=0, max_value=100, value=0)
    average_wind_speed_period = st.number_input('Enter Average Wind Speed Period (m/s)', min_value=0.0, value=0.0, step=0.1, format="%.1f")
    average_pressure_period = st.number_input('Enter Average Pressure Period (hPa)', min_value=0.0, value=0.0, step=0.01, format="%.2f")
    
    # Validation for required inputs
    if st.button('Predict'):
        if distance_to_solar_noon == 0.0 or temperature == 0 or wind_direction == 0 or wind_speed == 0.0 or sky_cover == 0 or visibility == 0.0 or humidity == 0 or average_wind_speed_period == 0.0 or average_pressure_period == 0.0:
            st.error("Please fill out all the fields with valid values.")
        else:
            # Call the predict function and display the result
            result = predict(distance_to_solar_noon, temperature, wind_direction, wind_speed, sky_cover, visibility, humidity, average_wind_speed_period, average_pressure_period)
            st.success(f'The Power Generated by the Solar Panel is: {result:,.0f} J')  # Format for better readability

if __name__ == '__main__':
    main()
